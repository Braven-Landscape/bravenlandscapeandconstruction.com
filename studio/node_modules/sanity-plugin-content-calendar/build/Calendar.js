"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Calendar;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

require("react-big-calendar/lib/css/react-big-calendar.css?raw");

var _reactBigCalendar2 = require("react-big-calendar");

var _dateFns = require("date-fns");

var _EventDialog = _interopRequireDefault(require("./EventDialog"));

var _Calendar = _interopRequireDefault(require("./Calendar.css"));

var _hooks = require("./hooks");

var _Event = _interopRequireDefault(require("./Event"));

var _config = require("./config");

var _AgendaEvent = _interopRequireDefault(require("./AgendaEvent"));

/* TODO
  - Add loading states to event dialog and agenda events
  - Put preview into component for reuse 
  - Document calendar config
  - Create a component for day view
  - Add params to edit links when there are changes in order to open changes panel
  - Save _rev when scheduled is clicked in order to enable point above
  - Make event text customizeable? Warning title and description, button text, 
*/
var locales = {
  'en-US': require('date-fns/locale/en-US')
};
var localizer = (0, _reactBigCalendar2.dateFnsLocalizer)({
  format: _dateFns.format,
  parse: _dateFns.parse,
  startOfWeek: _dateFns.startOfWeek,
  getDay: _dateFns.getDay,
  locales: locales
});
var components = {
  event: _Event["default"],
  agenda: {
    event: _AgendaEvent["default"]
  }
};

function Calendar() {
  var events = (0, _hooks.useEvents)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      selectedEvent = _useState4[0],
      setSelectedEvent = _useState4[1];

  var handleOpenDialog = function handleOpenDialog(event) {
    setIsOpen(true);
    setSelectedEvent(event);
  };

  var handleCloseDialog = function handleCloseDialog() {
    setIsOpen(false);
    setSelectedEvent(null);
  };

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: _Calendar["default"].container
  }, /*#__PURE__*/_react["default"].createElement(_reactBigCalendar2.Calendar, (0, _extends2["default"])({
    components: components,
    className: _Calendar["default"].calendar,
    localizer: localizer,
    events: events,
    startAccessor: "start",
    endAccessor: "end",
    onSelectEvent: handleOpenDialog,
    eventPropGetter: function eventPropGetter(_ref) {
      var start = _ref.start;
      return {
        className: "\n              ".concat(_Calendar["default"].event, " \n              ").concat((0, _dateFns.isPast)(start) ? _Calendar["default"].past : _Calendar["default"].future, "\n            ")
      };
    }
  }, _config.nativeOptions)), isOpen && /*#__PURE__*/_react["default"].createElement(_EventDialog["default"], {
    event: selectedEvent,
    isOpen: isOpen,
    onClose: handleCloseDialog
  }));
}