"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schedulingEnabled = schedulingEnabled;
exports.publishAt = publishAt;
exports.publishInFuture = publishInFuture;
exports.isScheduled = isScheduled;
exports.useScheduleMetadata = useScheduleMetadata;

var _reactHooks = require("@sanity/react-hooks");

var _dateFns = require("date-fns");

var _configContentCalendar = _interopRequireDefault(require("config:content-calendar"));

var _user = _interopRequireDefault(require("part:@sanity/base/user"));

function schedulingEnabled(type) {
  return !!_configContentCalendar["default"].types.find(function (t) {
    return t.type === type;
  });
}

function publishAt(_ref) {
  var draft = _ref.draft;
  if (!draft) return null;

  var typeConfig = _configContentCalendar["default"].types.find(function (t) {
    return t.type === draft._type;
  });

  if (typeConfig) {
    return draft[typeConfig.field];
  }

  return null;
}

function publishInFuture(_ref2) {
  var draft = _ref2.draft;
  var datetime = publishAt({
    draft: draft
  });

  if (datetime) {
    var then = (0, _dateFns.parseISO)(datetime);
    return (0, _dateFns.isFuture)(then);
  }
}

function isScheduled(_ref3) {
  var id = _ref3.id;
  var metadata = useScheduleMetadata(id);
  return metadata && metadata.data && !!metadata.data.datetime && !!metadata.data.rev;
}

function useScheduleMetadata(id) {
  var editState = (0, _reactHooks.useEditState)("schedule-metadata.".concat(id), 'schedule.metadata');
  var ops = (0, _reactHooks.useDocumentOperation)("schedule-metadata.".concat(id), 'schedule.metadata');
  var data = editState && editState.published ? editState.published : {
    _id: "schedule-metadata.".concat(id),
    _type: 'schedule.metadata'
  };
  return {
    commit: commit,
    data: data,
    "delete": deleteMetadata,
    setData: setData
  };

  function commit() {
    ops.commit.execute();
  }

  function deleteMetadata() {
    ops["delete"].execute();
  }

  function setData(datetime, rev) {
    _user["default"].getUser('me').then(function (user) {
      var now = new Date(Date.now());
      ops.patch.execute([{
        setIfMissing: {
          documentId: id,
          user: user,
          rev: rev,
          scheduledAt: now.toISOString()
        }
      }, {
        set: {
          datetime: datetime,
          rev: rev,
          user: user,
          scheduledAt: now.toISOString()
        }
      }]);
      ops.publish.execute();
    });
  }
}