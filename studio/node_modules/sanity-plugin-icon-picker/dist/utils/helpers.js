"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toCamel = toCamel;
exports.getSelectedProviders = getSelectedProviders;
exports.getAcceptedProviders = getAcceptedProviders;
exports.providerFromPrefix = providerFromPrefix;
exports.listToMatrix = listToMatrix;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _config = require("../config");

var _changeCase = require("change-case");

function toCamel(str) {
  return (0, _changeCase.camelCase)(str, {
    transform: function transform(input, index) {
      if (index === 0) return input.toLowerCase();
      if (Number(input)) return input;
      return (0, _changeCase.pascalCase)(input);
    }
  });
}

function getSelectedProviders() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [_config.PROVIDERS["default"].prefix].concat((0, _toConsumableArray2["default"])(getAcceptedProviders(options.providers)));
}

function getAcceptedProviders() {
  var providers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var filterOutDefault = function filterOutDefault(provider) {
    return provider.prefix !== "all-icons";
  };

  var mapPrefixes = function mapPrefixes(provider) {
    return provider.prefix;
  };

  var available = Object.values(_config.PROVIDERS).filter(filterOutDefault).map(mapPrefixes);
  var filtered = (0, _toConsumableArray2["default"])(providers).filter(function (e) {
    return this.indexOf(e) >= 0;
  }, available);
  if (!providers.length) return available;
  return filtered;
}

function providerFromPrefix(prefix) {
  return Object.values(_config.PROVIDERS).find(function (provider) {
    return provider.prefix === prefix;
  });
}

function listToMatrix(list, elementsPerSubArray) {
  var matrix = [],
      i,
      k;

  for (i = 0, k = -1; i < list.length; i++) {
    if (i % elementsPerSubArray === 0) {
      k++;
      matrix[k] = [];
    }

    matrix[k].push(list[i]);
  }

  return matrix;
}